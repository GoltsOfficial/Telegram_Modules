from aiogram import Router, types
from aiogram.filters import Command
from .quiz_data import QUIZ_QUESTIONS
from .utils import generate_quiz_keyboard

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

@router.message(Command("quiz"))
async def start_quiz(msg: types.Message):
    user_id = msg.from_user.id
    user_state[user_id] = 0
    question = QUIZ_QUESTIONS[0]
    kb = generate_quiz_keyboard(question["options"])
    await msg.answer(question["question"], reply_markup=kb)

@router.callback_query(lambda c: c.data.startswith("quiz:"))
async def handle_answer(call: types.CallbackQuery):
    user_id = call.from_user.id
    selected = call.data.split(":")[1]
    index = user_state.get(user_id, 0)
    question = QUIZ_QUESTIONS[index]

    if selected == question["answer"]:
        await call.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await call.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    index += 1
    if index < len(QUIZ_QUESTIONS):
        user_state[user_id] = index
        next_question = QUIZ_QUESTIONS[index]
        kb = generate_quiz_keyboard(next_question["options"])
        await call.message.answer(next_question["question"], reply_markup=kb)
    else:
        await call.message.answer("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        user_state.pop(user_id)

    await call.answer()
